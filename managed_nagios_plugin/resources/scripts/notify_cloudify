#! /usr/bin/env python
from __future__ import print_function
import argparse
import datetime
import hashlib
import json
import os
import re
import sys
import time

from rest_utils import (
    run_workflow_for_instance,
    StartWorkflowFailed,
    GetExecutionError,
    ExecutionDidNotSucceed,
    wait_for_execution_success,
)
import logging_utils
import nagios_utils as nagios
import utils

REACTION_CONFIGURATION_PATH = (
    '/etc/nagios/objects/target_types/{target_type}.json'
)
GROUP_REACTION_CONFIGURATION_PATH = (
    '/etc/nagios/objects/groups/types/{group_type}.json'
)
META_GROUP_REACTION_CONFIGURATION_PATH = (
    '/etc/nagios/objects/groups/members/{tenant}/{group_type}/'
    'meta/{prefix}.json'
)
GROUP_DEPLOYMENT_TARGET_PATH = (
    '/etc/nagios/objects/groups/members/'
    '{tenant}/{group_type}/{group_name}_target'
)
META_GROUP_DEPLOYMENT_TARGET_PATH = (
    '/etc/nagios/objects/groups/members/{tenant}/{group_type}/'
    'meta/{prefix}_target'
)
COMMENT_AUTHOR = 'Cloudify'
INSTANCE_FINDER_FOR_TENANT_DEPLOYMENT = re.compile(
    '^tenant:(?P<tenant>[^/]+)/deployment:(?P<deployment>[^/]+)$'
)
INSTANCE_FINDER_FOR_TARGET_TYPE = re.compile(
    '^target_type:(?P<target_type>[^/]+)$'
)
GROUP_AND_TENANT_FINDER = re.compile(
    '^tenant:(?P<tenant>[^/]+)/group_type:(?P<group_type>[^/]+)$'
)
GROUP_NAME_FINDER = re.compile(
    '^Instance (?P<group_name>.+) of group .+ for tenant .+$'
)
META_GROUP_DETAILS_FINDER = re.compile(
    '^Meta group check for prefix (?P<prefix>.+) '
    'for group (?P<group_type>.+) for tenant (?P<tenant>.+)$'
)
TENANT_DEPLOYMENT_HOSTGROUP = 'tenant:{tenant}/deployment:{deployment}'
LOCKFILE_BASE = '/var/spool/nagios/cloudifyreaction'
INSTANCE_LOCKFILE_PATH = os.path.join(LOCKFILE_BASE, '{instance}')
NODE_LOCKFILE_PATH = os.path.join(LOCKFILE_BASE,
                                  '{tenant}_{deployment}_{node}')
GROUP_LOCKFILE_PATH = os.path.join(LOCKFILE_BASE,
                                   '{tenant}_{group_type}_{group_name}')


class LockInUse(Exception):
    pass


def acquire_lock(lockfile_path):
    if os.path.exists(lockfile_path):
        # We'll happily acquire a lock if the process that launched it is not
        # running any more, e.g. due to crash or reboot
        if pid_from_lockfile_is_running(lockfile_path):
            raise LockInUse('Another process holds the lock.')

    my_pid = os.getpid()
    with open(lockfile_path, 'w') as lockfile_handle:
        lockfile_handle.write(str(my_pid))

    # Now let's make sure that the pid is correct in case we were not the only
    # process trying to obtain this lock at this time
    if not lockfile_belongs_to_process(lockfile_path, my_pid):
        raise LockInUse(
            'Another process obtained a lock while this process was '
            'attempting to.'
        )

    return True


def lockfile_belongs_to_process(lockfile_path, pid):
    if pid == get_pid_from_lockfile(lockfile_path):
        return True
    else:
        return False


def get_pid_from_lockfile(lockfile_path):
    with open(lockfile_path) as lockfile_handle:
        try:
            pid = int(lockfile_handle.read().strip())
        except ValueError:
            # The file was not written as we expect, ignore it
            pid = None
        return pid


def pid_from_lockfile_is_running(lockfile_path):
    process_pid = get_pid_from_lockfile(lockfile_path)
    if os.path.isdir('/proc/{pid}'.format(pid=process_pid)):
        return True
    else:
        return False


def release_lock(lockfile_path):
    my_pid = os.getpid()
    if lockfile_belongs_to_process(lockfile_path, my_pid):
        os.unlink(lockfile_path)
    else:
        raise LockInUse(
            'Cannot delete lockfile "{path}" belonging to PID {pid}'.format(
                path=lockfile_path,
                pid=get_pid_from_lockfile(lockfile_path),
            )
        )


class HostNotHealthy(Exception):
    pass


class NoHealthyManagers(Exception):
    pass


def wait_for_host_to_be_healthy(host_name, logger,
                                max_checks=6, check_interval=10):
    check = 0
    while check < max_checks:
        logger.debug('Check {num} of {max}'.format(num=check, max=max_checks))
        nagios_status = nagios.get_nagios_status()
        logger.debug('Checking nagios status for host status')
        host_status = nagios.get_host_status_with_services(host_name,
                                                           nagios_status)
        logger.debug('Host status was: {host_status}'.format(
            host_status=host_status,
        ))

        if host_status['host_state'] == '0' and not host_status['failing']:
            logger.debug('Host is healthy')
            return
        else:
            logger.debug(
                'Waiting {interval} for host to become healthy'.format(
                    interval=check_interval,
                )
            )
        check += 1
        logger.debug('Forcing a recheck on all failing checks for host')
        nagios.recheck_all_failing_checks_for_host(host_name, host_status)
        time.sleep(check_interval)

    message = 'Host did not become healthy within {time} seconds.'.format(
        time=check_interval * max_checks,
    )
    logger.error(message)
    raise HostNotHealthy(message)


def load_reaction_configuration(path, instance, deployment=None):
    if not deployment:
        deployment = nagios.get_tenant_and_deployment_for_instance(
            instance,
        )[1]
    substitutions = {
        '{{instance}}': instance,
        '{{deployment}}': deployment,
    }
    try:
        node = utils.get_node_id(instance)
        substitutions['{{node}}'] = node
    except IndexError:
        # No node ID could be retrieved, move on
        pass
    with open(path) as reaction_handle:
        reaction_configuration = reaction_handle.read()
        for placeholder, value in substitutions.items():
            reaction_configuration = reaction_configuration.replace(
                placeholder,
                value,
            )
        reaction_configuration = json.loads(reaction_configuration)
    return reaction_configuration


def get_group_details(target, service):
    if service.startswith('Meta '):
        group_details = META_GROUP_DETAILS_FINDER.match(service).groupdict()
        deployment_path = META_GROUP_DEPLOYMENT_TARGET_PATH.format(
            **group_details
        )
        group_details['group_name'] = 'meta:{prefix}'.format(
            prefix=group_details['prefix'],
        )
    else:
        group_details = {}
        group_and_tenant = GROUP_AND_TENANT_FINDER.match(target)
        if group_and_tenant:
            group_details.update(group_and_tenant.groupdict())
        group_name = GROUP_NAME_FINDER.match(service)
        if group_name:
            group_details.update(group_name.groupdict())
        deployment_path = GROUP_DEPLOYMENT_TARGET_PATH.format(
            **group_details
        )

    with open(deployment_path) as deployment_handle:
        group_details['deployment'] = deployment_handle.read().strip()
    return group_details


def determine_action(target, service, output, oid):
    group = output.startswith('GROUP ')
    deployment = None
    if group:
        group_details = get_group_details(target, service)
        if service.startswith('Meta '):
            conf_path = META_GROUP_REACTION_CONFIGURATION_PATH.format(
                **group_details
            )
        else:
            conf_path = GROUP_REACTION_CONFIGURATION_PATH.format(
                group_type=hashlib.md5(
                    group_details['group_type']
                ).hexdigest(),
            )
        deployment = group_details['deployment']
    else:
        conf_path = REACTION_CONFIGURATION_PATH.format(
            target_type=hashlib.md5(
                nagios.get_target_type_for_instance(target)
            ).hexdigest(),
        )
    full_configuration = load_reaction_configuration(conf_path,
                                                     target, deployment)

    if group or oid or service:
        if oid:
            configuration = full_configuration['traps'].get(oid)
        else:
            if 'HIGH CRITICAL' in output:
                level = 'high'
            elif 'LOW CRITICAL' in output:
                level = 'low'
            elif 'timed out while executing system call' in output.lower():
                return None
            else:
                raise ValueError(
                    'Service output is expected to specify "LOW CRITICAL" or '
                    '"HIGH CRITICAL", but neither was found.'
                )
            if group:
                configuration = full_configuration.get('reactions', {}).get(
                    level, {}
                )
                configuration['deployment'] = deployment
                configuration['tenant'] = group_details['tenant']
            else:
                # Service is prefixed with target type, remove that
                service = service.split(':')[1]
                configuration = full_configuration['checks'].get(
                    service, {}
                ).get(
                    level
                )
    else:
        # If service was not supplied, this must be a host check failure
        configuration = full_configuration['host']

    return configuration


if __name__ == '__main__':
    logger = logging_utils.Logger('notify_cloudify')

    parser = argparse.ArgumentParser(
        description=(
            'Notification script to cause cloudify to run workflows in '
            'response to monitoring events.'
        ),
    )

    parser.add_argument(
        '-t', '--target',
        help='The target this notification refers to.',
        required=True,
    )
    parser.add_argument(
        '-s', '--service',
        help=(
            'The service this notification refers to, if applicable. '
            'Required if type is service.'
        ),
        default='',
    )
    parser.add_argument(
        '-o', '--output',
        help=(
            'The output for this notification, if applicable. '
            'Required if type is service.'
        ),
        default='',
    )
    parser.add_argument(
        '-T', '--type',
        help=(
            'The entity type this notification refers to.'
        ),
        choices=('host', 'service'),
        required=True,
    )
    parser.add_argument(
        '-S', '--state',
        help='The state of the service or host this notification refers to.',
        required=True,
    )

    args = parser.parse_args()
    logger.debug('Called with args: {args}'.format(args=args))

    oid = None
    if args.output and args.output.startswith('SNMPTRAP '):
        logger.debug('Processing SNMP trap, getting OID')
        # Expected form:
        # SNMPTRAP <OID>: <message>
        oid = args.output.split(': ', 1)[0].split(' ')[1]
        logger.info('Processing SNMP trap for OID {oid}'.format(
            oid=oid,
        ))

    # CRITICAL for services, DOWN for hosts
    if args.state not in ('CRITICAL', 'DOWN'):
        logger.debug('Non-critical notification ignored')
        print('No action required on non-critical alerts.')
        sys.exit(0)

    if args.type == 'service' and (
        not args.service or not args.output
    ):
        logger.error('Service notification without details, aborting')
        sys.stderr.write(
            'Cannot act on service notification without service name!\n'
        )
        sys.exit(1)

    logger.debug('Determining reaction')
    reaction = determine_action(
        target=args.target,
        service=args.service,
        output=args.output,
        oid=oid,
    )
    logger.debug('Reaction details: {details}'.format(details=reaction))

    if reaction.get('workflow'):
        constraints = reaction.get('constraints', {})
        logger.debug('Checking constraints: {constraints}'.format(
            constraints=constraints,
        ))
        min_instances = constraints.get('min_instances')
        max_instances = constraints.get('max_instances')
        if min_instances or max_instances:
            logger.debug(
                'Checking instance limits (min: {min}, max: {max})'.format(
                    min=min_instances,
                    max=max_instances,
                )
            )

            count = len(nagios.get_node_instances_for_target(args.target))
            logger.debug('There are {num} instances'.format(num=count))

            if (
                min_instances and min_instances >= count
                or max_instances and max_instances <= count
            ):
                logger.info(
                    'No reaction will be performed due to instance count '
                    'constraints'
                )
                sys.exit(0)

        # Determine what the lockfile path should be
        node_details = nagios.get_node_details_from_name(args.target)
        if args.output.startswith('GROUP '):
            group_details = get_group_details(args.target, args.service)
        else:
            group_details = None
        if node_details:
            # This is a monitored node, not an instance
            logger.debug('Determining node lock path')
            lockfile_path = NODE_LOCKFILE_PATH.format(**node_details)
        elif group_details:
            # This is a group
            logger.debug('Determining group lock path')
            lockfile_path = GROUP_LOCKFILE_PATH.format(**group_details)
        else:
            # This is an instance
            logger.debug('Determining instance lock path')
            lockfile_path = INSTANCE_LOCKFILE_PATH.format(
                instance=args.target,
            )
        logger.debug('Lock path is {path}'.format(path=lockfile_path))
        if args.service:
            logger.debug('Appending service to lock path')
            lockfile_path += '_' + args.service
            logger.debug('Full lock path: {path}'.format(path=lockfile_path))
        logger.debug('Attempting to acquire lock')
        try:
            acquire_lock(lockfile_path)
        except LockInUse:
            logger.info(
                'Reaction not triggered as another reaction for the same '
                'check is already in progress. Lock path is {path}'.format(
                    path=lockfile_path,
                )
            )
            sys.exit(0)

        logger.info('Processing reaction')
        if group_details:
            tenant = group_details['tenant']
            deployment = group_details['deployment']
        else:
            tenant, deployment = (
                nagios.get_tenant_and_deployment_for_instance(args.target)
            )
        logger.debug(
            'Tenant is {tenant} and deployment is {deployment}'.format(
                tenant=tenant,
                deployment=deployment,
            )
        )

        if oid:
            logger.debug('Setting passive check status to "in progress"')
            successful_oid_reaction = False
            in_progress_message = '{pid} reacting to - {message}'.format(
                pid=os.getpid(),
                message=args.output,
            )
            nagios.submit_passive_check_result(
                host=args.target,
                service=args.service,
                status='1',
                output=in_progress_message,
            )

        success = False
        error_message = None
        try:
            logger.debug(
                'Adding comment to {target} on nagios notifiyng start of '
                'workflow'.format(
                    target=args.target,
                )
            )
            nagios.add_comment(
                args.target,
                (
                    'Running workflow {workflow} in response to health check '
                    'failure{service_explanation}.'.format(
                        workflow=reaction['workflow']['workflow_id'],
                        service_explanation=(
                            ' for service {service}'.format(
                                service=args.service)
                        ) if args.service else ''
                    )
                )
            )
            logger.debug('Triggering workflow')
            tenant, execution = run_workflow_for_instance(
                args.target, logger=logger,
                tenant=reaction.get('tenant'),
                deployment=reaction.get('deployment'),
                **reaction['workflow']
            )
            logger.debug('Waiting for execution: {execution}'.format(
                execution=execution,
            ))
            wait_for_execution_success(tenant, execution, logger)
            logger.debug('Execution finished successfully')
            if reaction['workflow']['workflow_id'] == 'heal':
                logger.info(
                    'Heal workflow was triggered, waiting for host to be '
                    'healthy'
                )
                wait_for_host_to_be_healthy(args.target, logger)
                logger.debug('Host is healthy')
            success = True
            if oid:
                successful_oid_reaction = True
                logger.debug('Updating state of SNMPTRAP check to indicate '
                             'success')
                nagios.submit_passive_check_result(
                    host=args.target,
                    service=args.service,
                    status='0',
                    output='Successful reaction complete at {time}'.format(
                        time=datetime.datetime.now(),
                    ),
                )

            logger.debug(
                'Adding comment to nagios regarding completion of workflow'
            )
            nagios.add_comment(
                args.target,
                (
                    'Finished workflow {workflow} successfully!'.format(
                        workflow=reaction['workflow']['workflow_id'],
                    )
                ),
            )
            logger.debug(
                'Triggering recheck of failing checks for this hostgroup'
            )
            nagios.recheck_all_failing_checks_for_hostgroup(
                hostgroup_name=TENANT_DEPLOYMENT_HOSTGROUP.format(
                    tenant=tenant,
                    deployment=deployment,
                ),
                nagios_status_dict=nagios.get_nagios_status(),
            )
        except HostNotHealthy as err:
            error_message = 'Host did not become healthy when healed: {err}'
            logger.exception(error_message)
        except StartWorkflowFailed as err:
            error_message = 'Could not start workflow: {err}'
            logger.exception(error_message)
        except GetExecutionError as err:
            error_message = 'Could not retrieve execution: {err}'
            logger.exception(error_message)
        except ExecutionDidNotSucceed as err:
            error_message = 'Execution did not complete successfully: {err}'
            logger.exception(error_message)
        except Exception as err:
            error_message = 'An unknown error occurred: ('
            error_message += str(type(err))
            error_message += ') {err}'
            logger.exception(error_message)
        finally:
            logger.debug('Releasing lock {path}'.format(path=lockfile_path))
            release_lock(lockfile_path)
            if success:
                logger.info('Reaction completed successfully')
                sys.exit(0)
            else:
                logger.warn(
                    'Workflow did not succeed, but should be retried if '
                    'check result does not improve'
                )

                if oid and not successful_oid_reaction:
                    logger.debug('Reverting state of SNMPTRAP check to allow '
                                 'reaction to retry')
                    nagios.submit_passive_check_result(
                        host=args.target,
                        service=args.service,
                        status='2',
                        output=args.output,
                    )

                if error_message:
                    error_message = error_message.format(err=str(err))
                else:
                    error_message = (
                        "An unknown error occurred, please investigate."
                    )
                logger.debug('Adding notification of failure to nagios')
                nagios.add_comment(args.target, error_message)
                sys.stderr.write('%s\n' % error_message)
                sys.exit(1)
    else:
        logger.info('No reaction defined, ignoring')
        print('No reaction configured for this state.')
        sys.exit(0)
